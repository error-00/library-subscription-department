# Generated by Django 4.1.7 on 2023-04-01 19:05

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('abonent', '0003_author_alter_book_options'),
    ]

    operations = [
        migrations.CreateModel(
            name='KnowledgeField',
            fields=[
                ('unique_num', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=45)),
                ('knowledge_field_unique_num', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonent.knowledgefield')),
            ],
            options={
                'verbose_name': 'KnowledgeField',
                'db_table': 'knowledge_field',
            },
        ),
        migrations.CreateModel(
            name='Reader',
            fields=[
                ('read_ticket_num', models.IntegerField(primary_key=True, serialize=False)),
                ('PIB', models.CharField(max_length=100)),
                ('home_adress', models.CharField(max_length=45)),
                ('tel_work', models.CharField(max_length=10)),
                ('tel_home', models.CharField(blank=True, max_length=10, null=True)),
                ('birth_date', models.DateField()),
            ],
            options={
                'verbose_name': 'Reader',
                'db_table': 'readers',
            },
        ),
        migrations.CreateModel(
            name='Copies',
            fields=[
                ('inventory_num', models.IntegerField(primary_key=True, serialize=False)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=7)),
                ('place', models.IntegerField()),
                ('shelf', models.IntegerField()),
                ('book_ISBN', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonent.book')),
            ],
            options={
                'verbose_name': 'Copies',
                'db_table': 'copies',
            },
        ),
        migrations.CreateModel(
            name='BookAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_ID_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonent.author')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonent.book')),
            ],
            options={
                'verbose_name': 'BooksAuthor',
                'db_table': 'book_has_author',
            },
        ),
        migrations.CreateModel(
            name='KnowledgeFieldHasBook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_ISBN', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonent.book')),
                ('knowledge_field_unique_num', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonent.knowledgefield')),
            ],
            options={
                'verbose_name': 'KnowledgeFieldHasBook',
                'db_table': 'knowledge_field_has_book',
                'unique_together': {('knowledge_field_unique_num', 'book_ISBN')},
            },
        ),
        migrations.CreateModel(
            name='BooksDelivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_issue', models.DateField()),
                ('date_return', models.DateField()),
                ('copies_inventory_num', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonent.copies')),
                ('readers_read_ticket_num', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abonent.reader')),
            ],
            options={
                'verbose_name': 'BooksDelivery',
                'db_table': 'books_delivery',
                'unique_together': {('readers_read_ticket_num', 'copies_inventory_num', 'data_issue')},
            },
        ),
    ]
